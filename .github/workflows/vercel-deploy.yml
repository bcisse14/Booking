name: Deploy Frontend (Vercel) — optimized

on:
  push:
    branches: [ main ]
    paths:
      - 'client/**'
      - 'client/**/**'

jobs:
  vercel-deploy:
    runs-on: ubuntu-latest
    env:
      # Build-time API URL baked into the production build. This avoids
      # runtime fallbacks and ensures the frontend posts to the backend.
      VITE_API_URL: 'https://booking-backend-cold-water-8579.fly.dev'
    concurrency:
      group: vercel-deploy-client
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: client
        run: npm ci

      - name: Build
        working-directory: client
        run: |
          # ensure VITE_API_URL is available during build (fall back to public backend)
          if [ -z "$VITE_API_URL" ]; then
            export VITE_API_URL="https://booking-backend-cold-water-8579.fly.dev"
          fi
          echo "Using VITE_API_URL=$VITE_API_URL"
          # Vite reads VITE_* env variables at build time
          npm run build

      - name: Verify build artifacts
        working-directory: client
        run: |
          echo "Listing client/dist"
          ls -la dist || true
          echo "Show index.html head"
          head -n 80 dist/index.html || true

      - name: Deploy to Vercel (npx)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "Missing VERCEL_TOKEN secret. Add it under Settings → Secrets → Actions." >&2
            exit 1
          fi
          cd client
          # Provide org/project envs (if available) and the token. We already
          # baked VITE_API_URL in the build above; passing the token avoids
          # interactive auth in CI.
          # Run vercel in debug mode and tee the output to a file so the
          # Actions job always contains the full CLI log for troubleshooting.
          npx --yes vercel --token "$VERCEL_TOKEN" --prod --yes --debug 2>&1 | tee /tmp/vercel-debug.log || true
          echo "=== Last lines of /tmp/vercel-debug.log ==="
          tail -n 400 /tmp/vercel-debug.log || true
          if [ -f ~/.vercel/logs/last.log ]; then
            echo "=== ~/.vercel/logs/last.log ==="
            tail -n 200 ~/.vercel/logs/last.log || true
          fi
